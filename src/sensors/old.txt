/**
 * Created by rafaelneri on 07/03/15.
 */

var utils = {
// Returns the lower 8 bits of  value
    lowByte: function (value) {
        return ( value & 0x0ff);
    },

// Returns the value shifted right by 8 bits
    highByte: function (value) {
        return ( lowByte(value >>8));
    },

// Returns the value of the bit number specified (return:0 or 1)
    bitRead: function (value, bitnum) {
        return ((value>>bitnum)&0x01);
    },

// Returns value with bit changed to specified data
    function bitWrite(value, bitnum, bitdata) {
        value = value & ~(0x01<<bitnum);
        bitdata = (bitdata & 0x01) << bitnum;
        return (value | bitdata);
    }

// Returns value with specified bit set
    function bitSet(value, bitnum) {
        return(value | (0x01 << bitnum));
    }

// Returns value with specified bit clear
    function bitClear(value, bitnum) {
        return(value & (~(0x01 << bitnum)));
    }

//Returns a value with one specified bit number set
    function bit(bitnum) {
        return(0x01<<bitnum);
    }

// Returns the sine of an angle (in radians).
    var sin = function (radians) {
        return (Math.sin(radians));
    };

// Returns the cos of an angle (in radians).
    function cos(radians) {
        return (Math.cos(radians));
    }

// Returns the tan of an angle (in radians).
    function tan(radians) {
        return (Math.tan(radians));
    }

// Returns the the minimum of x or y
    function min(x,y) {
        return (Math.min(x,y));
    }

// Returns the the maximum of x or y
    function max(x,y) {
        return (Math.max(x,y));
    }

// Returns the the absolute value of x
    function abs(x) {
        return (Math.abs(x));
    }

// Returns a value constrained within the range of a to b
// Returns: x if x is between a and b
//          a if x is less than a
//          b if x is greater than b
    function constrain(x,a,b) {
        if (x>b) x=b;
        else if (x<a) x=a;
        return (x);
    }

// Returns a value re-mapped from one range to another
    function map(value, fromLow, fromHigh, toLow, toHigh) {
        return( toLow + (((value-fromLow)*(toHigh-toLow))/(fromHigh-fromLow)));
    }

// Returns x raised to y power
    function pow(x,y) {
        return (Math.pow(x,y));
    }

// Returns the aquare root of x
    function sqrt(x) {
        return (Math.sqrt(x));
    }

// Returns nothing
    var randomSeedValue;
    function randomSeed(x) {
        // empty - javascript has no random seed function
        randomSeedValue = x;
    }

// Returns a pseudo-random number
// Valid calls: random(max)
//              random(min, max)
    function random(min, max) {
        if (isNaN(max))
        {
            max = min;
            min = 0;
        }
        return ((Math.random()*(max-min))+min);
    }
};

module.exports = utils;